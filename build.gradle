buildscript {
    repositories {
        mavenCentral()
        maven { url = "http://files.minecraftforge.net/maven" }
        maven { url = "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
    dependencies { classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT' }
}

def versionBuild = 0
if (System.getenv('BUILD_NUMBER') != null)
    versionBuild = System.getenv('BUILD_NUMBER')

version = "${mod_version}.${versionBuild}"

apply plugin: 'forge'
apply plugin: 'maven-publish'
apply plugin: 'curseforge'

group = 'com.matthewprenger.helpfixer'
archivesBaseName = 'HelpFixer'

repositories {
    mavenCentral()
}

dependencies {
    testCompile 'junit:junit:4.11'

}

minecraft {
    version = minecraft_version + '-' + forge_version
    mappings = project.mappings
    runDir = 'run'
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version
    inputs.property 'description', project.description
    inputs.property 'url', project.url

    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        include '**/*.properties'

        expand([
                'version'    : project.version,
                'mcversion'  : project.minecraft.version,
                'description': project.description,
                'url'        : project.url
        ])
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
        exclude '**/*.properties'
    }
}

task sourceJar(type: Jar, dependsOn: sourceMainJava) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

task deobfJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.output
    classifier = 'deobf'
}

tasks.build.dependsOn sourceJar, javadocJar, deobfJar

def manifestAttributes = [
        'Built-By'             : System.getProperty('user.name'),
        'Created-By'           : "${System.getProperty('java.vm.version')} + (${System.getProperty('java.vm.vendor')})",
        'Specification-Version': project.version,
        'Specification-Title'  : project.name
]

tasks.withType(Jar) { task -> task.manifest.mainAttributes(manifestAttributes) }

tasks.withType(JavaCompile) { task -> task.options.encoding = 'UTF-8' }

publishing {
    tasks.publish.dependsOn 'build'
    publications {
        mavenJava(MavenPublication) {
            pom.withXml {
                asNode().children().last() + {
                    resolveStrategy = DELEGATE_FIRST
                    name project.name
                    description project.description
                    url project.url
                    inceptionYear project.inceptionYear
                    packaging 'jar'
                    scm {
                        url project.scm_url
                        connection project.scm_connection
                        developerConnection project.scm_developerConnection
                    }
                    issueManagement {
                        system project.issues_system
                        url project.issues_url
                    }
                    licenses {
                        license {
                            name 'DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE'
                            url 'http://www.wtfpl.net/txt/copying/'
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id 'matthewprenger'
                            name 'Matthew Prenger'
                            roles { role 'developer' }
                        }
                    }
                }
            }

//            from components.java For some reason this is including MC deps now, need to figure out why
            artifact jar
            artifact sourceJar
            artifact javadocJar
            artifact deobfJar
        }
    }

    repositories {
        if (project.hasProperty('maven_url')) {
            maven { url project.maven_url }
        } else {
            maven { url file('repo') }
        }
    }
}

curse {
    dependsOn 'reobf'
    mustRunAfter 'publish'
    onlyIf { return project.hasProperty('curseforge_key') }

    if (project.hasProperty('curseforge_key')) apiKey = project.curseforge_key
    projectId = project.curse_projectId
    changelog = ''
    releaseType = 'release'
}